@page "/ChangePassword"
@inject NavigationManager Nav
@inject IAuthService AuthService
@inject ISnackbar Snackbar

<MudText Style="font-size:x-large; font-weight:700; font-family:sans-serif;" Color="Color.Primary" Align="Align.Center">Schimba Parola</MudText>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="3"></MudItem>
        <MudItem xs="12" sm="6">
            <MudCard>
                <MudCardContent>

                    <MudTextField Label="Old Password"
                                  @bind-Value="model.OldPassword" For="@(() => model.OldPassword)" />
                    <MudTextField Label="New Password" Class="mt-3"
                                  @bind-Value="model.NewPassword" For="@(() => model.NewPassword)" InputType="InputType.Password" />
                    <MudTextField Label="Confirm New Password" Class="mt-3"
                                  @bind-Value="model.ConfirmNewPassword" For="@(() => model.ConfirmNewPassword)" InputType="InputType.Password" />


                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="isLoading" Class="ml-auto rounded-pill">Submit Password Change</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="3"></MudItem>
    </MudGrid>
</EditForm>

@code {
    ChangePasswordDto model = new();
    DefaultFocus DefaultFocus { get; set; } = DefaultFocus.FirstChild;

    bool success;
    bool isLoading;

    async Task OnValidSubmit()
    {
        isLoading = true;

        CustomResponse<bool> response = await AuthService.ChangePaswordAsync(model);
        if (response.IsSuccessful)
        {
            Nav.NavigateTo("login", false);
        }
        else Snackbar.Add(response.Message, Severity.Error);

        isLoading = false;
        
    }

}